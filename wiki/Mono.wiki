#summary Instructions and issues relating to using transmission-remote-dotnet on Mono

Screenshot of 3.4 running on mono by 'theli.ua':
http://img5.imageshack.us/my.php?image=tnetcy2.png

At present, the standard binaries will not work with Mono. The main reason for this is the interprocess communication mechanism used to pass torrent locations to the first instance, which was introduced in .NET 3.5.

My best idea to workaround this is to use a localhost TCP/UDP socket instead of named pipes. This isn't as elegant of a solution, and it would cause firewall confirmations which some may be suspicious of. It would allow compatability with .NET 2.0, though.

Here's a list of other issues:

1) Region.Complement() crashes mine (but not others) Mono, though it doesn't seem to be essential.
2) On older versions of mono/transmission/both, authentication doesn't work.
3) Self signed SSL certificates don't work.
4) Mono winforms is quite sluggish and sometimes ugly.
5) The main window needs a minor resize each time it's opened so that the whole ToolStrip is visible.
6) Minimising to tray seems to lose all the ToolStrip items on some Mono verisons.

Other than these issues, Mono's winforms is kinda impressive in my opinion.

A GTK# UI would be nice. Trying to port everything would probably be hard. If I had the time, I'd get a skeleton of a UI working, then move the more reusable pieces of code like the CommandFactory, Torrent, ProtocolConstants, and Command classes. The UI glue would probably need to be rewritten almost completely.

To build for Mono:
1) Do a svn checkout.
2) Open the sln file in MonoDevelop (no makefile yet).
3) Remove the two Jayrock references and re-add them (from TransmissionClientNew/bin/Release)
4) Define the MONO symbol in project options.
5) Build and run.